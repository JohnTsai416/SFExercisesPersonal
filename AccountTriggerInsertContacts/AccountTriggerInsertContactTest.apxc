@isTest
public class AccountTriggerInsertContactTest {
    
    
    @isTest
    public static void SingleActionTest(){
        //Tests single action of what I do in the next test method since I wrote that one first
        
        Account a = new Account(Name='Test ' + 1);
        insert a;
        //Test Begins
        test.startTest();
        List<Contact> TestContacts = new List<Contact>([SELECT MailingStreet, MailingCity, 
                                                        MailingState, MailingPostalCode, MailingCountry,
                                                        LastName FROM Contact WHERE LastName LIKE 'Smith%']);
        test.stopTest();
        //Test Ends
        
        //Is the contact created?
        System.assertEquals(1, TestContacts.size());
        //Testing the Account Shipping Address vs the Contact Mailing Address
        System.assert(a.ShippingStreet==TestContacts[0].MailingStreet);
        System.assert(a.ShippingCity==TestContacts[0].MailingCity);
        System.assert(a.ShippingState==TestContacts[0].MailingState);
        System.assert(a.ShippingPostalCode==TestContacts[0].MailingPostalCode);
        System.assert(a.ShippingCountry==TestContacts[0].MailingCountry);
        
    }
    
    
    @isTest
    public static void BulkPositive(){
        //This method does bulk testing of the creation of contacts associated with the insertion of several accounts
        List<Account> TestAccounts = new List<Account>();
        for(Integer i = 0; i < 5; i++){
            Account a = new Account(Name='Test ' + i);
            TestAccounts.add(a);
        }
        insert TestAccounts;
        
        //Test Begins
        test.startTest();
        List<Contact> TestContacts = new List<Contact>([SELECT MailingStreet, MailingCity, 
                                                        MailingState, MailingPostalCode, MailingCountry,
                                                        LastName FROM Contact WHERE LastName LIKE 'Smith%']);
        test.stopTest();
        //Test Ends
        
        //Are 5 contacts created for 5 accounts inserted?
        System.assertEquals(5, TestContacts.size());
        //Testing Account Shipping Address vs Contacts Mailing Address for 1st list entries
        System.assert(TestAccounts[0].ShippingStreet==TestContacts[0].MailingStreet);
        System.assert(TestAccounts[0].ShippingCity==TestContacts[0].MailingCity);
        System.assert(TestAccounts[0].ShippingState==TestContacts[0].MailingState);
        System.assert(TestAccounts[0].ShippingPostalCode==TestContacts[0].MailingPostalCode);
        System.assert(TestAccounts[0].ShippingCountry==TestContacts[0].MailingCountry);
        //Testing Account Shipping Address vs Contacts Mailing Address for 2nd list entries
        System.assert(TestAccounts[1].ShippingStreet==TestContacts[1].MailingStreet);
        System.assert(TestAccounts[1].ShippingCity==TestContacts[1].MailingCity);
        System.assert(TestAccounts[1].ShippingState==TestContacts[1].MailingState);
        System.assert(TestAccounts[1].ShippingPostalCode==TestContacts[1].MailingPostalCode);
        System.assert(TestAccounts[1].ShippingCountry==TestContacts[1].MailingCountry);
        //The remaining items in each list can be expected to follow suit
    }
    
    @isTest
    public static void BulkNegative(){
        //This method is supposed to test the catching of a DML exception, but yeah....
        //The test passes, but the code coverage doesn't care and doesn't cover the one thing I have
        //the "system.assertEquals" statement for.
        try{
            List<Account> TestAccounts = new List<Account>();
            for(Integer i = 0; i < 5; i++){
                //Intentionally providing nameless accounts that won't insert and should throw a DML Exception
                Account a = new Account();
                TestAccounts.add(a);
            }
            insert TestAccounts;
            
        }catch(DMLException dml){
            System.debug('The following exception has occurred: ' + dml.getMessage());
            Boolean expectedExceptionThrown;
            //I ran a DML Exception in Execute Anonymous to see what phrase is contained in the Exception Message.  "Insert failed" is present,
            //but my code coverage does not recognize testing the catch exception line in the Apex Class.
            if(dml.getMessage().contains('Insert failed')){
                expectedExceptionThrown = true;
            }else{
                expectedExceptionThrown = false;
            }
            System.AssertEquals(true, expectedExceptionThrown);
        }   
        
    }
    
}